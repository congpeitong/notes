#+TITLE: Docker学习笔记
#+AUTHOR: congpeitong
#+EMAIL: congpeitong2022@163.com
#+OPTIONS: H:2 num:t timestamp:f

* 基本概念

** Docker镜像

*** 前言

操作系统分为内核和用户空间，对于Linux而言，内核启动之后，会挂载root文件系统为其提供用户空间支持。而Docker镜像，就相当于一个root文件系统。比如官方镜像ubuntu16.04就包含了一套完整的Ubuntu16.04最小系统的root文件系统。

Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序，库，资源，配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷，环境变量，用户）。镜像不包含任何动态数据，其内容在构建之后也不会发生任何改变。

*** 分层存储

因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在设计时，就充分利用Union FS技术，将其设置为分层存储的架构。所以严格来说，docker并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非是由一个文件组成，而是由一组文件系统组成，
或者说，由多层文件系统联合组成。

镜像构建时会一层层构建，前一层是后一层的基础，每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如删除前一层的文件操作，实际不是真删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。
因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。

分层存储的特征还使得镜像的复用，定制变得更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。

** Docker容器

镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建，启动，停止，删除，暂停等。

容器的实质是进程，但是与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统，自己的网络控制，自己的的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来就像是在一个独立于宿主的操作系统下操作一样。
这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学Docker时常常会混淆容器和虚拟机。

镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。

容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随着容器的删除而丢失。

按照Docker最佳实践的要求，容器不应该向存储层内写入任数据，容器存储层要保持无状态化。所有文件的写入操作，都应该使用数据卷，或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。

数据卷生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。

** 仓库(Docker Registry)

*** Docker Registry

镜像构建完成之后可以很容器在当前宿主机上运行，但是需要在其他服务上使用这个镜像，我们就需要一个集中的存储，分发镜像的服务，Docker Registry就是这样的服务。

一个Docker Registry中可以包含多个仓库；每个仓库可以包含多个标签，每个标签对应一个镜像。

通常一个仓库会包含同一软件不同版本的镜像，而标签就常用于对于该软件的各个版本。我们可通过<仓库名>:<标签>的格式来指定具体是这个软件，哪个版本的镜像。如果不给出标签，将以latest作为默认标签。

以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如：14.04,16.04,我们可以通过ubuntu:16.04,来指定所需哪个版本的镜像。如果不给出标签，比如ubuntu，那将视为ubuntu:latest。

仓库名经常以两段式路径出现，比如jwilder/nginx-proxy,前者往往意味着Docker Registry多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体Docker Registry的软件和服务。

*** Docker Registry公开服务

Docker Registry公开服务是开放给用户使用，允许用户管理镜像的Registry服务，一般这类公共服务允许用户免费上传下载，下载公开的镜像，并可能提供收费服务供用户管理私有镜像。

最常使用的Registry公开服务是官方的[[https://hub.docker.com][Docker Hub]],这也是默认的Registry,并拥有大量的高质量的官方镜像。除此之外还有，CoreOS的Quay.io, CoreOs相关的镜像存储在这里，Google的Google Container Registry, Kubernetes的镜像使用的就是这个服务。

由于某些原因，在国内访问这些服务可能会比较慢，国内一些云服务商提供了针对Docker Hub的镜像服务(Registry mirror),这些镜像被称为加速器，常见的有阿里云加速器，DaoCloud加速器等。使用加速器会直接从国内的地址下载Docker Hub的镜像，比直接从Docker Hub上下载速度会提高很多

* 安装Docker
