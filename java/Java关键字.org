#+title: JAVA关键字

* volatile
** 概念
volatile是java中的关键字，是一个变量修饰符，被用来修饰会被不同线程访问和修改的变量。
** volatile作用
1. 可见性

   可见性是指多个线程访问同一个变量时，其中一个线程修改了该变量的值，其它的线程能够立即看到
   修改的值。

   在Java内存模型中，所有的变量都存储在主存中，同时每个线程都拥有自己的工作线程，用于提高
   访问速度。线程会从主存中拷贝变量值到自己的工作内存中，然后在自己的工作线程中操作变量值
   而不是直接操作主存中的变量，由于每个线程在自己的内存中都有一个变量的拷贝，就会造成变量值
   不一致的问题。

   使用volatile关键字可以解决这个问题，使用volatile修饰的变量确保了线程不会将该变量拷贝到
   自己的工作线程中，所有线程对该变量的的操作都是在主存中进行，所以volatile修饰的变量对所有
   线程可见。
2. 原子性

   volatile只保证单次读/写操作的原子性，对于多步操作，volatile不能保证原子性。因此volatile并不能解决
   所有的同步问题
3. 有序性

   在Java内存模型中，允许编译器和处理器对指令进行重排序，重排序的过程不会影响到单线程程序的执行，但是会
   影响到多线程并发执行的正确性。

   volatile关键字可以禁止指令重新排序，可以保证一定的有序性。

   volatile修饰的变量的有序性有两层含义：
     + 所有在volatile修饰的变量写操作之前的写操作，将会对随后该volatile修饰的变量读操作之后的语句可见。
     + 禁止JVM重新排序：volatile修饰的变量的读写指令不能和其前后的任何指令重排序，其前后的指令可能会被重排序。
     + happen-before关系是用来判断是否存在数据竞争，线程是否安全的主要依据，也是指令重排的依据，保证了多线程
       下的可见性。

       volatile 修饰的变量在读写时会建立happen-before关系
