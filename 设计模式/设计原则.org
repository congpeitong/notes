#+TITLE:23种设计模式
#+AUTHOR: CONGPEITONG
#+STARTUP: overview top-level headlines only
* 模式设计的目的
1. 代码重用性（相同功能的代码，不用多次编写）
2. 可读性（编程规范性，便于其他程序员的阅读和理解）
3. 可扩展性（当需要增加新的功能时，非常的方便，称为可维护）
4. 可靠性（我们增加新的功能后，对原来的功能没有影响）
5. 使程序呈现高内聚，低耦合的特性
* 设计模式七大原则
** 单一职责原则
对类来说，即一个类应该只负责一项职责，
1. 降低类的复杂度，一个类只负责一项职责。
2. 提高类的可读性，可维护性。
3. 降低变更引起的风险。
4. 通常情况下。
** 接口隔离原则(Interface Segreation Principle)
1. 基本介绍
   客户端不应该依赖他不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。
** 依赖倒转原则
1. 基本介绍
   + 高层模块不应该依赖底层模块，二者都应该依赖其抽象。
   + 抽象不应该依赖细节，细节应该依赖抽象。
   + 依赖倒转(倒置)的中心思想是面向接口编程。
   + 依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多，在Java中，抽象指的是接口或者抽象类，细节就是具体的实现类。
   + 使用接口或者抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。
** 里氏替换原则
1. 思考：如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障
2. 在编程中如何正确的使用继承------>里氏替换原则
3. 在使用继承时，子类中尽量不要重写父类的方法
4. 里氏替换原则告诉我们，继承实际上让两个类耦合性增强，在适当的情况下，可以通过，聚合，组合，依赖来解决
** 开闭原则
*** 基本介绍
1. 开闭原则时编程中最基础，最重要的设计原则。
2. 一个软件实体，如类，模块和函数应该对扩展开放（提供方），对修改关闭（对使用方），用抽象构建框架，用实现扩展细节。
3. 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改自己的代码来实现变化。
4. 编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。
** 迪米特法则
*** 基本介绍
1. 一个对象应该对其它对象保持最少的了解。
2. 类与类关系越密切，耦合度越大。
3. 迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好，也就说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部，对外除了提供的public方法，不对外泄露任何信息。
4. 迪米特法则还有个更简单的方式定义，只于直接的朋友通信。
5. 直接朋友：每个对象都会与其它对象有着耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系，耦合的方式有很多，依赖，关联，组合，聚合，等，其中，我们称
   出现出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友，也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。
*** 迪米特法则
1. 迪米特法则核心就是降低类之间的耦合。
2. 注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类之间（对象之间）的耦合关系，并不是要求完全没有依赖关系。
** 合成复用原则
*** 基本介绍
原则是尽量使用合成/聚合的方式，而不是使用继承。
** 设计原则核心思想
1. 找出应用中可能变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。
2. 针对接口编程，而不是针对实现编程。
3. 为了交互对象之间的松耦合设计而努力


* 创建型模式
** Factory(工厂方法和设计工厂)
** Builder
** Prototype(原型)
* 结构型模式
** Adapter(适配器)
** proxy(代理)
** Facede
** composite(组合)
** Decorator(装饰器)
** bridge(桥连)
** Flyweight(共享元)
* 行为型模式
** Command(命令模式)
** Observer(观察者)
** Template(模板方法模式)
** Strategy(策略)
** Chain of Responsibility(责任链)
** Mediator(中介)
** State(状态)
** Memento(注释状态)
** Interpretor(解释器)
** Visitor(访问者模式)
