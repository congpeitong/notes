#+TITLE: 设计模式---创建型模式
#+AUTHOR: CONGPEITONG
#+STARTUP: overview top-level headlines only
* 单例模式
所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类
只提供一个取得其对象实例的方法。
** 饿汉式（静态常量）
*** 步骤
1. 构造器私有化（防止 new 对象）
2. 类的内部创建对象。
3. 向外暴露一个静态的公共方法，例如getInstance
5. 代码实现
#+begin_src java
    public class SingletonTest01 {
      public static void main(String[] args) {
        Singleton instance1 = Singleton.getInstance();
        Singleton instance2 = Singleton.getInstance();
        System.out.println(instance1==instance2);; // true
        System.out/println(instance1.hashCode() == instance2.hashCode()); // true
      }
    }

  // 饿汉式（静态变量）
  class Singleton {
    // 1. 构造器私有化，外部能new
    private Singleton() {

    }

    // 2. 本类内部创建对象实例
    private final static Singleton instance = new Singleton();

    // 3. 提供一个公有的静态方法，返回实例对象
    public static Singleton getInstance() {
      return instance;
    }
  }
#+end_src
*** 优缺点
1. 优点：写法简单，就是在类装载的时候就完成实例化，避免了线程同步问题。
2. 缺点：在类装载的时候就完成实例化，没有达到懒加载的效果，如果从始至终从未使用过这个实例，就会造成内存的浪费。
3. 这种方式基于classLoader机制避免了多线程的同步问题，不过，instance在类装载时候就实例化，在单例模式中大多数都是调用getInstance方法，
   但是导致类装载的原因有很多种，因此不能确定有其他方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到懒加载的效果。
4. 因此，这种单例模式可用，但是可能导致内存浪费。
** 饿汉式（静态代码块）
#+begin_src java
  class Singleton{

    private Singleton(){}

    // 2. 本类内部创建实例对象
    private static Singleton instance;

    // 在静态代码块中创建实例对象
    static {
      instace = new Singleton();
    }
    // 3. 提供一个公有的静态方法，返回实例对象
    public static Singleton getInstance() {
      return instance;
    }

  }
#+end_src
** 懒汉式（线程不安全）
#+begin_src java
  class Singleton {
    private static Singleton instance;

    private Singleton() {}

    // 提供一个公有的静态方法，当使用该方法时才去创建instance对象
    // 懒汉式
    public static Singleton getInstance() {
      if (instance == null) {
        instance = new Singleton();
      }
      return instance;
    }
  }
#+end_src
*** 优缺点
1. 起到了懒加载的效果，但是只能在单线程下使用。
2. 如果在多线程下，一个线程进入了if (singleton == null)判断语句，还未来得及往下执行，另一个线程也通过
   这个判断语句，这是便会产生多个实例，所以在多线程环境下不可使用这种方式
3. 因此，在实际开发中，不要使用这种方式
** 懒汉式（线程安全，同步方法）
#+begin_src java
  class Singleton {
    private static Singleton instance;

    private Singleton() {}

    // 提供一个公有的静态方法，当使用该方法时才去创建instance对象
    // 懒汉式 增加同步处理代码，解决线程不安全的问题
    public static synchronized Singleton getInstance() {
      if (instance == null) {
        instance = new Singleton();
      }
      return instance;
    }
  }
#+end_src
*** 优缺点
1. 解决了线程不安全的问题，
2. 效率太低，每个线程在想获得类的实例的时候，执行getInstance()都要进行同步。而其实这个方法只执行一次实例化代码
   就够了，后面的想获得该类实例，直接 return 就好了，方法进行同步效率太低
3. 因此，实际开发中，不推荐这种使用方式
** 懒汉式（线程安全，同步代码块）
#+begin_src java
  class Singleton {
    private static Singleton instance;

    private Singleton() {}

    // 提供一个公有的静态方法，当使用该方法时才去创建instance对象
    // 懒汉式 同步机制放入代码块
    public static Singleton getInstance() {
      if (instance == null) {
        synchronized (Singleton.class){
          instance = new Singleton();
        }
      }
      return instance;
    }
  }
#+end_src
*** 优缺点
1. 这种方式，本意是对第四种实现方法进行改进，因为前面同步方法效率太低，，改为同步产生实例化的代码块。
2. 但是这种同步并不能起到线程同步的作用，跟第三种实现方式遇到的情形一致。
3. 在实际开发中，不能使用这种方式。
** 双重检查
#+begin_src java
  class Singleton {
    private static volatile Singleton instance;

    private Singleton() {}

    // 提供一个公有的静态方法，当使用该方法时才去创建instance对象
    // 双重检查 解决线程安全问题，同时解决懒加载问题
    public static synchronized Singleton getInstance() {
      if (instance == null) {
        synchronized(Singleton.class) {
          if (instance == null) {
            instance = new Singleton();
          }
        }
      }
      return instance;
    }
  }
#+end_src
*** 优缺点
1. Double-Check 概念是多线程开发中经常使用的，如代码中所示，我们进行了两次if(instance == null)检查，
   这样就可以保证线程安全了。
2. 这样实例化代码只执行一次，后面再次访问时，判断if (instance == null),直接return实例化对象，也避免的反复进行方法同步。
3. 线程安全：延迟加载，效率较高
4. 实际开发中，推荐使用这种单例设计模式。
** 静态内部类
*** 静态内部类特点
1. 当外部类被装载的时候内部类并不会被装载。
2. 当静态内部类被调用时，静态内部类才会被装载。而且只会被装载一次，而且装在时线程是安全的，不会有安全性的问题。
*** 示例
#+begin_src java
  class Singleton {
    private Singleton(){}

    private static class SingletonInstance {
      private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getInstance() {
      return SingletonInstance.INSTANCE;
    }
  }
#+end_src
*** 优缺点
1. 这种方式采用了类装载的机制来保证初始化实例只有一个线程。
2. 静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会
   装载SingletonInstance类，从而完成Singleton的实例化。
3. 类的静态属性只会在第一次加载类的时候初始化，所以在这里JVM帮助我们保证了线程的安全性，在类进行
   初始化时，别的线程是无法进入的。
4. 优点： 避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。
5. 推荐使用这种方式。
** 枚举
*** 示例
#+begin_src java
  enum Singleton {
    INSTANCE; // 属性
    public void sayOK() {
      System.out.println("ok....");
    }
  }

#+end_src
*** 优缺点
1. 借助 JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，而且还能防止反序列化重复创建新的对象。
2. 提倡，推荐使用。
** 单例模式注意事项和细节说明
+ 单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建和销毁的对象，使用单例模式可以提高系统的性能
+ 当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new
+ 单例模式使用的场景：需要频繁的进行创建和销毁的对象，创建对象时耗时过多或者耗费资源过多（即：重量级对象），但又经常用到的对象，工具类对象，频繁
  访问数据库或文件的对象（比如：数据源，session工厂等）。
* 原型模式(prototype)
** 原型模式定义
1. 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象
2. 原型模式是一种创建型模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。
** 原型模式工作原理
通过将一个原型对象传给哪个要发动创建的对象，
这个发动要创建的对象通过请求原型对象拷贝他们自己来实施创建
** 使用方式
+ 因为Java中提供clone()方法来实现对象的克隆，所以prototype模式实现一下子变得非常简单。
+ 以勺子为例
  #+begin_src java
    public abstract class AbstractSpoom implements Cloneable {
      String spoonName;
      public void setSpoonName(String spoonName){
        this.spoonName = spoonName;
      }
      public String getSpoonName() {
        return this.spoonName;
      }
      public Object clone() {
        Object object = null;
        try{
          object = super.clone();
        } catch (CloneNotSupportedException exception) {
          System.err.println("Abstract Spoon is not  Cloneable")
        }
        return object;
      }
    }
  #+end_src

  #+begin_src java
    //  具体实现类
    public class SoupSpoon extends AbstractSpoon {
      public SoupSpoon() {
        setSpoonName("Soup Spoon");
      }
    }
  #+end_src
  调用Prototype模式
  #+begin_src java
    AbstractSpoon spoon = new SoupSpoon();
    AbstractSpoon spoon2 = spoon.clone();
  #+end_src
  当然也可以结合工厂模式来创建AbstractSpoon实例
** 浅拷贝介绍
1. 对于数据类型是基本数据类型的成员变量，浅拷贝回直接进行值传递，也就是将该属性值复制一份给新的对象。
2. 对于数据类型是引用数据类型的成员变量，比如说，成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象，因为实际上两个对象的
   该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量。
3. 比如clone()方法，就是浅拷贝
** 深拷贝介绍
1. 复制对象的所有基本数据类型的成员变量。
2. 为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝。
3. 深拷贝实现方式
   + 重写clone()方法来实现深拷贝
   + 通过对象序列化实现深拷贝
** 深拷贝示例
#+begin_src java
  public class DeepProtoType implements Serializable,Cloneable {
    public String name; // String属性
    public DeepCloneableTarget deepcloneabletarget; // 引用类型
    public DeepPrototype() {
      super();
    }
    // 深拷贝---方式1  使用clone方法

  }

#+end_src

* 建造者模式(Builder)
** 模式定义
将一个复杂对象的构建和他的表示分离，使得同样的构建过程可以创建不同的表示。

Builder模式是一步一步创建一个复杂的对象，它允许用户可以只通过指定复杂对象的类型和内容就可以构建他们，用户不知道内部的具体构建细节。Builder模式是非常类似于抽象工厂模式，细微的区别大概只有在反复的使用中
才能体会到。

Builder 模式的使用是为了将构建复杂对象的过程和它的部件解耦。注意：是解耦过程和部件。

因为一个复杂的对象，不但有很多大量组成部分，如：汽车，有很多部件：车轮，方向盘，发动机，还有各种小零件等等，部件很多，但远远不止这些，如何将这些部件组装成一辆汽车，这个装配过程也很复杂（需要很好的组装技术），
Builder模式就是为了将部件和组装过程分开。

如何使用？

首先假设一个复杂对象是由多个部件组成的，Builder模式是把复杂对象的创建和部件的创建分别开来，分别用Builder类和Director类来表示。

首先需要一个接口，它定义如何创建复杂对象的各个部件：

#+begin_src java
  public interface Builder {
    // 创建部件A 比如创建汽车车轮
    void buildPartA();
    // 创建部件B 比如创建汽车方向盘
    void buildPartB();
    // 创建部件C 比如创建汽车发动机
    void buildPartC();
    // 返回最后组装成品结果（返回最后装配好的汽车）
    // 成品组装的过程不在这里进行，而是转移到下面的Director类中进行
    // 从而实现了解耦过程和部件
    Product getResult();
  }

#+end_src

用Director构建最后的复杂对象，而在上面Builder接口中封装的是如何创建一个个部件（复杂对象是由这些部件组成的），也就是说Director的内容是如何将部件最后组装成成品：

#+begin_src java
  public class Director {
    private Builder builder;

    public Director(Builder builder) {
      this.builder = builder;
    }

    // 将部件partA partB part最后组成复杂对象
    // 这里是将车轮 方向盘 发动机 组装成汽车的过程

    public void construct() {
      builder.buildPartA();
      builder.buildPartB();
      builder.buildPartC();
    }
  }
#+end_src

Builder的具体实现ConcreteBuilder:

通过具体完成接口Builder来构建或装配产品的部件；

定义并明确它所要创建的是什么具体东西；

提供一个可以重新获取产品的接口：
#+begin_src java

public class ConcreteBuilder implements Builder {
 Part partA, partB, partC;
 public void buildPartA() {
 //这里是具体如何构建 partA 的代码
 };
 public void buildPartB() {
 //这里是具体如何构建 partB 的代码
 };
 public void buildPartC() {
 //这里是具体如何构建 partB 的代码
 };
 public Product getResult() {
 //返回最后组装成品结果
 };
}

#+end_src

复杂对象:产品 Product:

#+begin_src java
public interface Product { }
#+end_src

复杂对象的部件:

#+begin_src java
  public interface Part { }
#+end_src

我们看看如何调用 Builder 模式:

  #+begin_src java
  ConcreteBuilder builder = new ConcreteBuilder();
  Director director = new Director( builder );
  director.construct();
  Product product = builder.getResult();
#+end_src

** Builder 模式的应用
在 Java 实际使用中,我们经常用到"池"(Pool)的概念,当资源提供者无法提供足够的资源,并且这些资源需要被很多用户反复共
享时,就需要使用池.
"池"实际是一段内存,当池中有一些复杂的资源的"断肢"(比如数据库的连接池,也许有时一个连接会中断),如果循环再利用这
些"断肢",将提高内存使用效率,提高池的性能.修改 Builder 模式中 Director 类使之能诊断"断肢"断在哪个部件上,再修复这个部件.

* 工厂模式
** 简单工厂模式
*** 基本介绍
1. 简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出
   哪种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。
2. 简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）。
3. 在软件开发中，当我们会用到大量的创建某种类，某类，某批对象时，就会使用到工厂模式。
** 工厂模式定义
提供创建对现象的接口
** 前言
1. 工厂模式相当于创建实例对象的new,我们经常要根据类class生成实例对象，如果A a = new A(),工厂模式也是用来创建对象的，所以以后new对象时可以多个心眼，是否可以考虑实用工厂模式，
   虽然这样做，可能多做一些工作，但是会给你系统带来更大的可扩展性和尽量少的修改量。
2. Smaple示例
   如果创建实例对象则是  Sample sample = new Sample().

   实际情况是我们在创建sample实例时做点初始化的工作，比如赋值，查询数据库等。

   首先可以用构造函数：Sample sample = new Smaple(参数)；

   但是如果创建sample实例时所作的初始化工作不是像赋值这么简单的事儿，可能是很长的一段代码，
   如果是也写入构造函数中，就非常难看了。

   难看的意思是代码如果很长，说明初始化工作做的很多，将很多工作装入一个方法中，就相当于很多
   鸡蛋放入一个篮子里面，是非常危险的，这也是有悖于java面向对象的原则，
   面向对象的分派（Encapsulation）和 分割（Delegation）告诉我们，尽量将长的代码，
   分派，切割成每段。
   将每段再封装起来（减少段和段之间的耦合联系性），这样就会将风险分散，以后如果需要修改，只要更改每段，不会再发生牵一动百的事情。

   因此我们需要将创建实例的工作与使用实例的工作分离开，也就说，让创建实例所需的大量的初始化工作从Sample的构造函数中分离出去。
   这时就需要Factory工厂模式来生成对象了，不能再用上面简单new Sample(参数)了。还有，如果Sample有个继承如mysample按照面向接口编程，我们需要将Sample抽象成一个接口。现在Sample是接口，有两个子类，
   MySample和Hissample,我们要实例化他们时如下：

   #+begin_src java
   Sample mySample = new MySample();
   Samaple hisSample = new HisSample();

   #+end_src

   随着项目的深入，Sample可能还会生出很多儿子，那么我们需要对这些儿子一个个实例化。
   更糟糕的是，可能还要对以前的代码进行修改：加入后来生儿子的实例，这在传统程序中是无法避免的。

   但是如果你一开始就有意识的使用了工厂模式，这些麻烦就没有了。

 3. 工厂方法

    首先你会专门建立一个生产sample实例的工厂：

    #+begin_src java
      public class Factory {
        public static Sample creator(int which) {
          // getClass产生sample一般可以使用动态类装载装入类
          if (which == 1) {
            return new SmapleA();
          } else if (which == 2) {
            return new SmapleB();
          }
        }
       }
    #+end_src

    那么在你的程序中，如果有实例化Sample时，就使用

    Sample smapleA = Factory.creator(1);

    这样在整个就不会涉及到sample具体的子类，达到封装的效果，也就是减少错误修改的机会，这个原理可以用很通俗的话来比喻，
    就是具体的事情做的越多，就越容易犯错误。

    使用工厂方法，要注意几个角色，首先你要定义产品接口，例如上面的Sample,产品接口下有sample接口的实现类，
    例如SampleA,其次要有一个Factory类,用来生成产生Sample.

    进一步则稍微复杂一点，就是在工厂类上进行拓展，工厂类也有继承他的实现类concretefactory了。
  4. 抽象工厂
     工厂模式中有：工厂方法（Factory Method）和 抽象工厂（Abstract Factory）

     这两个模式区别在于需要创建对象的复杂程度上。如果我们创建对象的方法变得复杂了，

     例如上面工厂方法中是创建一个对象sample，如果我们还有新的产品接口sample2。

     这里假设：Sample有两个实现类sampleA和sampleB,Sample2也有两个实现类Sample2A和sample2B。

     我们将上例中的factory变成抽象类，将共同部分封装在抽象类中，不同部分使用子类实现

     示例如下：
     #+begin_src java
       public abstract class Factory {

         public abstract Smaple creator();

         public abstract Sample2 creator(String name);

       }

       public class SimplaeFactory extends Factory {

         public Sample creator() {
           ......
           return new SampleA();
         }
         public Smaple2 creaotr(String name) {
           ....
           return new Sample2A();
         }

       }

       public class Bombfactory extend Factory {

         public Smaple creator() {
           ....
           return new SmapleB();
         }

         public Smaple2B creator(String name) {
           ....
           return new Sample2B();
         }
       }
     #+end_src
     从上面可以看出，两个工厂各自生产出一套sample和sample2，也许你会疑问，为什么我们不可以使用两个工厂方法来分别生产sampleA和sampleB呢？

     抽象工厂还有另外一个关键要点，是因为SampleFactory内，生成Sample和Sample2的方法之间有一定的联系，所以才要将两个方法绑在一个类中，这个工厂有其本身特征，也许制造工程是统一的，
     比如：制造工艺比较简单，所以名字叫做SampleFactory。

     在实际应用中，工厂方法用的比较多一些，而且是和动态类装入器组合在一起应用。

     示例：
      #+begin_src java

      #+end_src
